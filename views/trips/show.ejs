<% include ../partials/header.ejs %>
<main>
  <div class="container"> 
    <div class="row">
      <div class="col s12 m6">
        <h2><%= trip.name %></h2>
        <p>This is a trip</p>
        <p>Your trip is scheduled for <strong><%=trip.startDate%></strong> through <strong><%=trip.endDate%></strong> </p>
      </div>
      <div class="col s12 offset-m1 m5">
        <div class="options-box">
          <h3></h3>
          <div>
            <input id="zoom-to-area-text" type="text" placeholder="Enter your favorite area!"/>
            <input id="zoom-to-area" class="btn" type="button" value="Zoom"/>
          </div>
          <hr>
          <div>
            <span class="text">Search for more places to add:</span>
            <input id="places-search" type="text" placeholder="Ex: Eiffel Tower"/>
            <input id="go-places" class="btn" type="button" value="Go"/>
          </div>
        </div>
      </div>
    </div>
    
    <div id="map"></div>
  </div>
</main>
<script>
// Add map to view all saved locations!!!
var map;
var markers;
var placeMarkers = [];

// Locations array to hold locations from location table (joined with trip)
var locations = [];

function initMap(){
  // Style the markers a bit. This will be our listing marker icon.
  var defaultIcon = makeMarkerIcon('663399');
  // Create a "highlighted location" marker color for when the user
  // mouses over the marker.
  var highlightedIcon = makeMarkerIcon('00e2e2');

  // Constructor creates a new map - only center and zoom are required
  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 47.6076641, lng: -122.3355026},
    zoom: 8,
    mapTypeControl: false
  });

  // Autocomplete search in time entry box
  // var timeAutocomplete = new google.maps.places.Autocomplete(
  //   document.getElementById('search-within-time-text'));
  // Autocomplete search in geocoder entry box
  var zoomAutocomplete = new google.maps.places.Autocomplete(
    document.getElementById('zoom-to-area-text'));
  // Bias the boundaries within the map for the zoom to area text.
  zoomAutocomplete.bindTo('bounds', map);
  // Search box to execute a places search
  var searchBox = new google.maps.places.SearchBox(
    document.getElementById('places-search'));
  // Bias the search box to within the bounds of the map
  searchBox.setBounds(map.getBounds());

  var largeInfoWindow = new google.maps.InfoWindow();

  // Zoom to Area button
  document.getElementById('zoom-to-area').addEventListener('click', function() {
    zoomToArea();
  });

  // Listen for the event fired when the user selects a prediction and clicks "Go" or hits the "enter" key
  document.getElementById('go-places').addEventListener('click', textSearchPlaces);
  document.getElementById('go-places').addEventListener('keyup', function(e) {
    if (e.keycode === 13) {
      textSearchPlaces;
    }
  });
}

// This function takes in a COLOR, and then creates a new marker
// icon of that color. The icon will be 21 px wide by 34 high, have an origin
// of 0, 0 and be anchored at 10, 34).
function makeMarkerIcon(markerColor) {
  var markerImage = new google.maps.MarkerImage(
    'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
    '|40|_|%E2%80%A2',
    new google.maps.Size(21, 34),
    new google.maps.Point(0, 0),
    new google.maps.Point(10, 34),
    new google.maps.Size(21,34));
  return markerImage;
};

// This function will loop through the markers array and display them all.
function showListings() {
  var bounds = new google.maps.LatLngBounds();
  // Extend the boundaries of the map for each marker and display the marker.
  for (var i = 0; i < markers.length; i++) {
    markers[i].setMap(map);
    bounds.extend(markers[i].position);
  };
  map.fitBounds(bounds);
};

// This function will loop through the listings and hide them all.
  function hideMarkers(markers) {
    for (var i = 0; i < markers.length; i++) {
      markers[i].setMap(null);
    };
  };

// This function takes the input value in the find nearby area text input
// locates it, and then zooms into that area. This is so that the user can
// show all listings, then decide to focus on one area of the map.
function zoomToArea() {
  // Initialize the geocoder.
  var geocoder = new google.maps.Geocoder();
  // Get the address or place that the user entered.
  var address = document.getElementById('zoom-to-area-text').value;
  // Make sure the address isn't blank.
  if (address == '') {
    window.alert('You must enter an area, or address.');
  } else {
    // Geocode the address/area entered to get the center. Then, center the map
    // on it and zoom in
    geocoder.geocode(
      { address: address,
        componentRestrictions: {locality: 'New York'}
      }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          map.setCenter(results[0].geometry.location);
          map.setZoom(11);
        } else {
          window.alert('We could not find that location - try entering a more' +
            ' specific place.');
        }
      });
  }
}

// This function fires when the user selects "go" on the places search.
// It will do a nearby search using the entered query string or place.
function textSearchPlaces() {
  var bounds = map.getBounds();
  hideMarkers(placeMarkers);
  var placesService = new google.maps.places.PlacesService(map);
  placesService.textSearch({
    query: document.getElementById('places-search').value,
    bounds: bounds
  }, function(results, status) {
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      createMarkersForPlaces(results);
    };
  });
};

// This function creates markers for each place found in either places search.
function createMarkersForPlaces(places) {
  var bounds = new google.maps.LatLngBounds();
  for (var i = 0; i < places.length; i++) {
    var place = places[i];
    var icon = {
      url: place.icon,
      size: new google.maps.Size(35,35),
      origin: new google.maps.Point(0,0),
      anchor: new google.maps.Point(15,34),
      scaledSize: new google.maps.Size(25,25)
    };
    // Create a marker for each place
    var marker = new google.maps.Marker({
      map: map,
      position: place.geometry.location,
      title: place.name,
      animation: google.maps.Animation.DROP,
      icon: icon,
      id: place.place_id
    });
    // Create a single infowindow to be used with the place details information
    // so that only one is open at once.
    var placeInfoWindow = new google.maps.InfoWindow();
    // If a marker is clicked, do a place details search on it in the next function.
    marker.addListener('click', function() {
      if (placeInfoWindow.marker == this) {
        console.log("This infowindow already is on this marker!");
      } else {
        getPlacesDetails(this, placeInfoWindow);
      }
    });
    placeMarkers.push(marker);
    if(place.geometry.viewport) {
      // Only geocodes have viewport
      bounds.union(place.geometry.viewport);
    } else {
      bounds.extend(place.geometry.location);
    };
  };
  map.fitBounds(bounds);
};

// This is the PLACE DETAILS search - it's the most detailed so it's only
// executed when a marker is selected, indicating the user wants more
// details about that place.
function getPlacesDetails(marker, infowindow) {
  var service = new google.maps.places.PlacesService(map);
  service.getDetails({
    placeId: marker.id
  }, function(place, status) {
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      // Set the marker property on this infowindow so it isn't created again.
      infowindow.marker = marker;
      var innerHTML = '<div>';
      if (place.name) {
        innerHTML += '<strong>' + place.name + '</strong>';
      }
      if (place.formatted_address) {
        innerHTML += '<br>' + place.formatted_address;
      }
      if (place.formatted_phone_number) {
        innerHTML += '<br>' + place.formatted_phone_number;
      }
      if (place.opening_hours) {
        innerHTML += '<br><br><strong>Hours:</strong><br>' +
            place.opening_hours.weekday_text[0] + '<br>' +
            place.opening_hours.weekday_text[1] + '<br>' +
            place.opening_hours.weekday_text[2] + '<br>' +
            place.opening_hours.weekday_text[3] + '<br>' +
            place.opening_hours.weekday_text[4] + '<br>' +
            place.opening_hours.weekday_text[5] + '<br>' +
            place.opening_hours.weekday_text[6];
      }
      if (place.photos) {
        innerHTML += '<br><br><img src="' + place.photos[0].getUrl(
            {maxHeight: 100, maxWidth: 200}) + '">';
      }
      // Form and button to add location data to locations table
      // Need location name, address, place_id, lat, lng
      innerHTML += '<br/><form action="/trips/<%= trip.name%>" method="POST"><input class="btn purple" type="submit" value="Add to Trip"/></form>'
      innerHTML += '</div>';
      infowindow.setContent(innerHTML);
      infowindow.open(map, marker);
      // Make sure the marker property is cleared if the infowindow is closed.
      infowindow.addListener('closeclick', function() {
        infowindow.marker = null;
      });
    }
  });
}

</script>
<script async defer src=
"https://maps.googleapis.com/maps/api/js?key=<%= process.env.KEY %>&libraries=places&v=3&callback=initMap">
</script>
<% include ../partials/footer.ejs %>